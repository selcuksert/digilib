version: '3'
services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL",  "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2375/version" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      CONTAINERS: 1
      IMAGES: 1
      AUTH: 1
      POST: 1
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
      VOLUMES: 1
      INFO: 1
      EXEC: 1
      SESSION: 1
      SYSTEM: 1
      CONFIGS: 1
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.11
    restart: unless-stopped
    volumes:
      - ./certificates:/usr/share/certificates
      - ./traefik:/usr/share/configuration
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/usr/share/configuration/
      - --providers.file.watch=true
      - --ping
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.neo4j.address=:7687
      - --entrypoints.db.address=:5432
      - --entrypoints.kafka.address=:9092
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI: http://localhost:8081 (enabled by --api.insecure=true)
      - "8081:8080"
      - "7687:7687"
      - "5432:5432"
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - socket-proxy
  neo4j:
    image: neo4j:5-community
    user: "${UID}:${GID}"
    restart: unless-stopped
    environment:
      NEO4J_AUTH: none
      TZ: 'Europe/Istanbul'
    healthcheck:
      test: [ "CMD-SHELL",  "wget", "--no-verbose", "--tries=1", "--spider", "localhost:7474" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neo4j-web.rule=Host(`neo4j.digilib.local`)"
      - "traefik.http.routers.neo4j-web.entrypoints=websecure"
      - "traefik.http.routers.neo4j-web.tls=true"
      - "traefik.http.routers.neo4j-web.service=neo4j-web-service"
      - "traefik.http.services.neo4j-web-service.loadbalancer.server.port=7474"
      - "traefik.http.routers.neo4j-wss.rule=Host(`neo4j.digilib.local`)"
      - "traefik.http.routers.neo4j-wss.entrypoints=neo4j"
      - "traefik.http.routers.neo4j-wss.tls=true"
      - "traefik.http.routers.neo4j-wss.service=neo4j-wss-service"
      - "traefik.http.services.neo4j-wss-service.loadbalancer.server.port=7687"
      - "traefik.tcp.routers.neo4j.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.neo4j.entrypoints=neo4j"
      - "traefik.tcp.routers.neo4j.service=neo4j-service"
      - "traefik.tcp.services.neo4j-service.loadbalancer.server.port=7687"
    depends_on:
      - reverse-proxy
  db:
    user: postgres
    image: postgres:16-alpine
    restart: unless-stopped
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      PGUSER: ${PGUSER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: 'Europe/Istanbul'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.db.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.db.entrypoints=db"
      - "traefik.tcp.routers.db.service=db-service"
      - "traefik.tcp.services.db-service.loadbalancer.server.port=5432"
    depends_on:
      - reverse-proxy
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    container_name: pgadmin4_container
    healthcheck:
      test: [ "CMD-SHELL",  "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      TZ: 'Europe/Istanbul'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.digilib.local`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.routers.pgadmin.service=pgadmin-service"
      - "traefik.http.services.pgadmin-service.loadbalancer.server.port=80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - reverse-proxy
      - db
  broker:
    image: confluentinc/confluent-local:latest
    hostname: broker
    container_name: broker
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics", "--bootstrap-server", "broker:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      TZ: 'Europe/Istanbul'
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.broker.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.broker.entrypoints=kafka"
      - "traefik.tcp.routers.broker.service=broker-service"
      - "traefik.tcp.services.broker-service.loadbalancer.server.port=9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - reverse-proxy
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    healthcheck:
      test: [ "CMD-SHELL", "curl", "-sX", "GET", "http://localhost:9000/broker" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_BROKERCONNECT: broker:29092
      SERVER_SERVLET_CONTEXTPATH: "/"
      JVM_OPTS: "-Xms32M -Xmx64M"
      TZ: 'Europe/Istanbul'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafdrop.rule=Host(`kafdrop.digilib.local`)"
      - "traefik.http.routers.kafdrop.entrypoints=websecure"
      - "traefik.http.routers.kafdrop.tls=true"
      - "traefik.http.routers.kafdrop.service=kafdrop-service"
      - "traefik.http.services.kafdrop-service.loadbalancer.server.port=9000"
    depends_on:
      - broker
      - reverse-proxy
  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:latest
    container_name: zipkin
    healthcheck:
      test: [ "CMD-SHELL",  "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:9411/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      STORAGE_TYPE: mem
      TZ: 'Europe/Istanbul'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zipkin.rule=Host(`zipkin.digilib.local`)"
      - "traefik.http.routers.zipkin.entrypoints=websecure"
      - "traefik.http.routers.zipkin.tls=true"
      - "traefik.http.routers.zipkin.service=zipkin-service"
      - "traefik.http.services.zipkin-service.loadbalancer.server.port=9411"
    depends_on:
      - reverse-proxy
  portainer:
    image: portainer/portainer-ce:2.20.2-alpine
    container_name: portainer
    restart: unless-stopped
    command:
      - -H
      - tcp://socket-proxy:2375
      - --admin-password=${PORTAINER_ADMIN_PASSWORD_HASH}
    environment:
      PORTAINER_ADMIN_PASSWORD_HASH: ${PORTAINER_ADMIN_PASSWORD_HASH}
      TZ: 'Europe/Istanbul'
    healthcheck:
      test: [ "CMD-SHELL",  "wget", "--no-verbose", "--tries=1", "--spider", "localhost:9000" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - portainer-data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.digilib.local`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.service=portainer-service"
      - "traefik.http.services.portainer-service.loadbalancer.server.port=9000"
    depends_on:
      - socket-proxy
      - reverse-proxy
networks:
  default:
volumes:
  postgresql-data:
  pgadmin-data:
  kafka-data:
  portainer-data:
